;; 不够可以来这里找：https://github.com/Crandel/tempel-collection/tree/main/templates
;; 官方帮助 https://github.com/minad/tempel

fundamental-mode ;; Available everywhere

(today (format-time-string "%Y-%m-%d"))
(NOW (format-time-string "%Y-%0m-%0d %H:%0M"))
(yesterday (format-time-string "%Y-%0m-%0d" (time-subtract nil (* 24 60 60))))
(tomorrow (format-time-string "%Y-%0m-%0d" (time-add nil (* 24 60 60))))
(clang-format "---
BasedOnStyle: Google
IndentWidth: 4
SortIncludes: false
ObjCBlockIndentWidth: 4
")

prog-mode

(fixme (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "FIXME ")
(todo (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "TODO ")
(bug (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "BUG ")
(hack (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "HACK ")
(timestamp (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "Time-stamp: <>")
(coding (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "-*- coding: " (p "utf-8") (if (derived-mode-p 'emacs-lisp-mode) "; lexical-binding: t;" "") " -*-")

latex-mode

(begin "\\begin{" (s env) "}" r> n> "\\end{" (s env) "}")
(frac "\\frac{" p "}{" q "}")
(enumerate "\\begin{enumerate}\n\\item " r> n> "\\end{enumerate}")
(itemize "\\begin{itemize}\n\\item " r> n> "\\end{itemize}")

lisp-mode emacs-lisp-mode ;; Specify multiple modes

(lambda "(lambda (" p ")" n> r> ")")

emacs-lisp-mode

(autoload ";;;###autoload")
(pt "(point)")
(lambda "(lambda (" p ")" n> r> ")")
(var "(defvar " p "\n  \"" p "\")")
(local "(defvar-local " p "\n  \"" p "\")")
(const "(defconst " p "\n  \"" p "\")")
(custom "(defcustom " p "\n  \"" p "\"" n> ":type '" p ")")
(face "(defface " p " '((t :inherit " p "))\n  \"" p "\")")
(group "(defgroup " p " nil\n  \"" p "\"" n> ":group '" p n> ":prefix \"" p "-\")")
(macro "(defmacro " p " (" p ")\n  \"" p "\"" n> r> ")")
(alias "(defalias '" p " '" p ")")
(fun "(defun " p " (" p ")\n  \"" p "\"" n> r> ")")
(iflet "(if-let (" p ")" n> r> ")")
(whenlet "(when-let (" p ")" n> r> ")")
(iflet* "(if-let* (" p ")" n> r> ")")
(whenlet* "(when-let* (" p ")" n> r> ")")
(andlet* "(and-let* (" p ")" n> r> ")")
(cond "(cond" n "(" q "))" >)
(pcase "(pcase " (p "scrutinee") n "(" q "))" >)
(let "(let (" p ")" n> r> ")")
(let* "(let* (" p ")" n> r> ")")
(rec "(letrec (" p ")" n> r> ")")
(dotimes "(dotimes (" p ")" n> r> ")")
(dolist "(dolist (" p ")" n> r> ")")
(loop "(cl-loop for " p " in " p " do" n> r> ")")
(command "(defun " p " (" p ")\n  \"" p "\"" n> "(interactive" p ")" n> r> ")")
(advice-add "(defun my-" (s target) " (&rest app)" n>  n> "(apply app))" n>
            "(advice-add #'" target " " (p ":around") " #'my-" target ")")
(provide "(provide '" (file-name-base (or (buffer-file-name) (buffer-name))) ")" n
         ";;; " (file-name-nondirectory (or (buffer-file-name) (buffer-name))) " ends here" n)
(log "(message \"LOG %s " (s sexp) ": %S"
     "\" (format-time-string \"%X\") " sexp ")")
(define-advice "(define-advice " (p "target") " (" (p ":around") " (orig-fn &rest args) my)"  n> "(let ((result (apply orig-fn args)))" n> q n>"result))")

eshell-mode

(for "for " (p "i") " in " p " { " q " }")
(while "while { " p " } { " q " }")
(until "until { " p " } { " q " }")
(if "if { " p " } { " q " }")
(ife "if { " p " } { " p " } { " q " }")
(unl "unless { " p " } { " q " }")
(unle "unless { " p " } { " p " } { " q " }")

text-mode

(cut "--8<---------------cut here---------------start------------->8---" n r n
     "--8<---------------cut here---------------end--------------->8---" n)
(asciibox "+-" (make-string (length str) ?-) "-+" n
          "| " (s str)                       " |" n
          "+-" (make-string (length str) ?-) "-+" n)
(rot13 (p "plain text" text) n "----" n (rot13 text))
(calc (p "taylor(sin(x),x=0,3)" formula) n "----" n (format "%s" (calc-eval formula)))

rst-mode

(title (make-string (length title) ?=) n (p "Title: " title) n (make-string (length title) ?=) n)

java-mode java-ts-mode

(class "public class " (p (file-name-base (or (buffer-file-name) (buffer-name)))) " {" n> r> n "}")

org-mode

(title "#+title: " p n "#+author: Daniel Mendler" n "#+language: en" n n)
(quote "#+begin_quote" n> r> n> "#+end_quote")
(example "#+begin_example" n> r> n> "#+end_example")
(center "#+begin_center" n> r> n> "#+end_center")
(comment "#+begin_comment" n> r> n> "#+end_comment")
(verse "#+begin_verse" n> r> n> "#+end_verse")
(src "#+begin_src " p n> r> n> "#+end_src" :post (org-edit-src-code))
(elisp "#+begin_src emacs-lisp" n> r> n "#+end_src" :post (org-edit-src-code))

bat-mode

(cmake_build "call \"C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\vcvarsall.bat\"
cd ..
cd TDPCSoftMgr_vs2010
ninja
cd ..")

c-mode c++-mode c-ts-mode c++-ts-mode

(main "#include <stdio.h>
#include <iostream>
int main()
{
    " q "
    return 0;
}
")
(inc "#include " q)
;; (incc "#include \"" (p (concat (file-name-base (or (buffer-file-name) (buffer-name))) ".h")) "\"")
(guard (p (concat (upcase (file-name-nondirectory (file-name-sans-extension (or (buffer-file-name) "")))) "_H") guard-name t)
"#ifndef "  guard-name n
"#define " guard-name n n
q n n
"#endif /* " guard-name " */")
(for "for ("(p "auto i = 0i32")"; " (p "i < N") "; "(p "++i")") {"n > q n"}">)
(if "if ("p") {" n > q n >"}">) ;; 目前缩进还有些问题
(struct "struct "p" {"n > q n >"};">)
(class "class "p"{"n > q n >"};">)
(pub "public:" n >)
(pri "private:" n >)
(pro "protect:" n >)
(while "while ("p") {"n > q n >"}">)
(singleton "class " (p "" cls-name) "{
  public:
    static "cls-name"& getInstance() {
        static "cls-name" a;
        return a;
    }
    "q"
  protected:
    "cls-name"(){}
};

#define the"cls-name" ("cls-name"::getInstance())
")
(ss "std::shared_ptr<"p">")
(str "std::string")
(cplus "#ifdef __cplusplus
extern \"C\" {
#endif
"q"
#ifdef __cplusplus
}
#endif
")

cmake-mode cmake-ts-mode

(bin_dir "set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})")
(clangd "if(NOT MSVC_IDE)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
add_custom_target(
    clangd ALL
    ${CMAKE_COMMAND} -E copy_if_different
    ${CMAKE_BINARY_DIR}/compile_commands.json
    ${CMAKE_SOURCE_DIR}
    )
add_dependencies("q" clangd)
endif()")
(mt_set "set(CompilerFlags CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE CMAKE_C_FLAGS CMAKE_C_FLAGS_DEBUG CMAKE_C_FLAGS_RELEASE )
foreach(CompilerFlag ${CompilerFlags})
    string(REPLACE \"/MD\" \"/MT\" ${CompilerFlag} \"${${CompilerFlag}}\")
endforeach()")
(cmake_minimum_required "cmake_minimum_required(VERSION " (p "2.6") ")")
(add_executable "add_executable(" (p "" exe-name) " " (p "main.cpp") ")
target_link_libraries("exe-name" "q")")
(add_library "add_library(" (p "" exe-name) " " (p "main.cpp") ")
target_link_libraries("exe-name" "q")")

lua-mode

(lc "local " q)
(ret "return"q)
(pairs "for "(p "name")", "(p "val")" in pairs("(p "table_name")") do
	"q"
end")
(ipairs "for "(p "idx")", "(p "val")" in ipairs("(p "table_name")") do
	"q"
end")
(if "if "p" then
	"q"
end
")
(fun "function "p"("p")
	"q"
end
")
(repeat "repeat
	"p"
until "q"
")

python-mode python-ts-mode

(main "#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import sys

def main():
    "q"
    input(\"over!\")

if __name__ == \"__main__\":
    try:
        main()
    except:
        import traceback
        traceback.print_exc()
        input()
")
(pathset "os.environ['PATH'] += os.pathsep + r'"q"'")
(oswalk "for root, dirs, files in os.walk(\".\"):" n> "for fname in files:" n> "fpath = os.path.join(root, fname)" q)

rust-mode rust-ts-mode

(if "if " p " {" n> q n> "}" q)

(el "if " p " {" n> p n> "} else {" n> p n> "}" q)

(elif "if " p " {" n> p n> "} else if " p " {" n> p n> "}" q)

(fn "fn " p "(" p ") {" n> p n "}" q)

(fnr "fn " p "(" p ") -> " p " {" n> p n "}" q)

(crt "extern crate " q ";")

(drv "#[derive(" p ")]" q)

(d "dbg!(" p ")" q)

(lp "loop {" n> q n> "}" q)

;; Local Variables:
;; mode: lisp-data
;; outline-regexp: "[a-z]"
;; End:
